apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'


// configuration of the generated JAR package
jar {
    manifest {
        attributes("Implementation-Title": "BACnet/IT Transport Websocket Binding",
                   "Implementation-Version": version)
    }
}

// Maven repositories to look for dependencies
repositories {
    mavenLocal()
    jcenter()
}

// the project dependencies
dependencies {
    compile "ch.fhnw.bacnet-it:bacnet-it-ase:${ase_version}"
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.24'
    compile 'io.netty:netty-all:4.1.2.Final'
}

// dependencies of build task
build.dependsOn jacocoTestReport

// test tasks
test {
    ignoreFailures = false
    reports {
        junitXml.enabled = true
        html.enabled = true
    }               
}

checkstyle {
    toolVersion = '7.5.1'
}

findbugs {
    ignoreFailures = 'true'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

// first create XML report and then execute second task which creates HTML report
findbugsMain {
    reports {
        html.enabled = false
        xml.enabled = true
    }
    doLast {
        findbugsMainHtml.execute()
    }
}

// first create XML report and then execute second task which creates HTML report
findbugsTest {
    reports {
        html.enabled = false
        xml.enabled = true
    }
    doLast {
        findbugsTestHtml.execute()
    }
}

// findbugs task which generates HTML report for main classes
task findbugsMainHtml(type: FindBugs, dependsOn: classes) {
    classes = fileTree('build/classes/main/')
    classpath = files()
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

// findbugs task which generates HTML report for test classes
task findbugsTestHtml(type: FindBugs, dependsOn: testClasses) {
    classes = fileTree('build/classes/main/')
    classpath = files()
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

// set version of gradle wrapper to generate
wrapper.gradleVersion = '3.5'

// install into Maven repository
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'ch.fhnw.bacnet-it'
            artifactId = project.name
            version = project.version
            from components.java

            artifact sourcesJar {
                classifier = 'sources'
            }
            artifact javadocJar {
                classifier = 'javadoc'
            }
        }
    }
}

