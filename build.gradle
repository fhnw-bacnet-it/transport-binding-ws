apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'java-library-distribution'


version = '0.1.0-SNAPSHOT'

jar {
    baseName = 'bacnet-it-wsbinding'
    manifest {
        attributes("Implementation-Title": "BACnet/IT Websocket Binding",
                   "Implementation-Version": version)
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


// In this section you declare the dependencies for your production and test code
dependencies {
    compile project(':bacnet-it-stack')
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'io.netty:netty-all:4.1.2.Final'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

build.dependsOn jacocoTestReport

test {
    ignoreFailures = true
    reports {
        junitXml.enabled = true
        html.enabled = true
    }               
}

checkstyle {
    toolVersion = '7.5.1'
}

findbugs {
    ignoreFailures = 'true'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

// first create XML report and then execute second task which creates HTML report
findbugsMain {
    reports {
        html.enabled = false
        xml.enabled = true
    }
    doLast {
        findbugsMainHtml.execute()
    }
}

// first create XML report and then execute second task which creates HTML report
findbugsTest {
    reports {
        html.enabled = false
        xml.enabled = true
    }
    doLast {
        findbugsTestHtml.execute()
    }
}

// findbugs task which generates HTML report for main classes
task findbugsMainHtml(type: FindBugs, dependsOn: classes) {
    classes = fileTree('build/classes/main/')
    classpath = files()
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

// findbugs task which generates HTML report for test classes
task findbugsTestHtml(type: FindBugs, dependsOn: testClasses) {
    classes = fileTree('build/classes/main/')
    classpath = files()
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}
